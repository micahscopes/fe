---
source: crates/hir-analysis/tests/ty_check.rs
expression: res
input_file: crates/hir-analysis/test_files/ty_check/pat/path_tuple.fe
---
note: 
   ┌─ path_tuple.fe:5:14
   │  
 5 │   pub fn foo() {
   │ ╭──────────────^
 6 │ │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
 7 │ │     let Foo::Variant(.., a, b) = Foo::Variant(1, 2, 3, 4)
 8 │ │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
 9 │ │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
10 │ │ }
   │ ╰─^ ()

note: 
  ┌─ path_tuple.fe:6:9
  │
6 │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
  │         ^^^^^^^^^^^^^^^^^^^^^^^^ Foo

note: 
  ┌─ path_tuple.fe:6:22
  │
6 │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
  │                      ^ u8

note: 
  ┌─ path_tuple.fe:6:25
  │
6 │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
  │                         ^ u16

note: 
  ┌─ path_tuple.fe:6:28
  │
6 │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
  │                            ^ u32

note: 
  ┌─ path_tuple.fe:6:31
  │
6 │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
  │                               ^ u64

note: 
  ┌─ path_tuple.fe:6:36
  │
6 │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
  │                                    ^^^^^^^^^^^^ fn Variant

note: 
  ┌─ path_tuple.fe:6:36
  │
6 │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
  │                                    ^^^^^^^^^^^^^^^^^^^^^^^^ Foo

note: 
  ┌─ path_tuple.fe:6:49
  │
6 │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
  │                                                 ^ u8

note: 
  ┌─ path_tuple.fe:6:52
  │
6 │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
  │                                                    ^ u16

note: 
  ┌─ path_tuple.fe:6:55
  │
6 │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
  │                                                       ^ u32

note: 
  ┌─ path_tuple.fe:6:58
  │
6 │     let Foo::Variant(a, b, c, d) = Foo::Variant(1, 2, 3, 4)
  │                                                          ^ u64

note: 
  ┌─ path_tuple.fe:7:9
  │
7 │     let Foo::Variant(.., a, b) = Foo::Variant(1, 2, 3, 4)
  │         ^^^^^^^^^^^^^^^^^^^^^^ Foo

note: 
  ┌─ path_tuple.fe:7:22
  │
7 │     let Foo::Variant(.., a, b) = Foo::Variant(1, 2, 3, 4)
  │                      ^^ <invalid>

note: 
  ┌─ path_tuple.fe:7:26
  │
7 │     let Foo::Variant(.., a, b) = Foo::Variant(1, 2, 3, 4)
  │                          ^ u32

note: 
  ┌─ path_tuple.fe:7:29
  │
7 │     let Foo::Variant(.., a, b) = Foo::Variant(1, 2, 3, 4)
  │                             ^ u64

note: 
  ┌─ path_tuple.fe:7:34
  │
7 │     let Foo::Variant(.., a, b) = Foo::Variant(1, 2, 3, 4)
  │                                  ^^^^^^^^^^^^ fn Variant

note: 
  ┌─ path_tuple.fe:7:34
  │
7 │     let Foo::Variant(.., a, b) = Foo::Variant(1, 2, 3, 4)
  │                                  ^^^^^^^^^^^^^^^^^^^^^^^^ Foo

note: 
  ┌─ path_tuple.fe:7:47
  │
7 │     let Foo::Variant(.., a, b) = Foo::Variant(1, 2, 3, 4)
  │                                               ^ u8

note: 
  ┌─ path_tuple.fe:7:50
  │
7 │     let Foo::Variant(.., a, b) = Foo::Variant(1, 2, 3, 4)
  │                                                  ^ u16

note: 
  ┌─ path_tuple.fe:7:53
  │
7 │     let Foo::Variant(.., a, b) = Foo::Variant(1, 2, 3, 4)
  │                                                     ^ u32

note: 
  ┌─ path_tuple.fe:7:56
  │
7 │     let Foo::Variant(.., a, b) = Foo::Variant(1, 2, 3, 4)
  │                                                        ^ u64

note: 
  ┌─ path_tuple.fe:8:9
  │
8 │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^ Foo

note: 
  ┌─ path_tuple.fe:8:22
  │
8 │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
  │                      ^ u8

note: 
  ┌─ path_tuple.fe:8:25
  │
8 │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
  │                         ^^ <invalid>

note: 
  ┌─ path_tuple.fe:8:29
  │
8 │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
  │                             ^ u32

note: 
  ┌─ path_tuple.fe:8:32
  │
8 │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
  │                                ^ u64

note: 
  ┌─ path_tuple.fe:8:37
  │
8 │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
  │                                     ^^^^^^^^^^^^ fn Variant

note: 
  ┌─ path_tuple.fe:8:37
  │
8 │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
  │                                     ^^^^^^^^^^^^^^^^^^^^^^^^ Foo

note: 
  ┌─ path_tuple.fe:8:50
  │
8 │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
  │                                                  ^ u8

note: 
  ┌─ path_tuple.fe:8:53
  │
8 │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
  │                                                     ^ u16

note: 
  ┌─ path_tuple.fe:8:56
  │
8 │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
  │                                                        ^ u32

note: 
  ┌─ path_tuple.fe:8:59
  │
8 │     let Foo::Variant(a, .., b, c) = Foo::Variant(1, 2, 3, 4)
  │                                                           ^ u64

note: 
  ┌─ path_tuple.fe:9:9
  │
9 │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^ Foo

note: 
  ┌─ path_tuple.fe:9:22
  │
9 │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
  │                      ^ u8

note: 
  ┌─ path_tuple.fe:9:25
  │
9 │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
  │                         ^ u16

note: 
  ┌─ path_tuple.fe:9:28
  │
9 │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
  │                            ^ u32

note: 
  ┌─ path_tuple.fe:9:31
  │
9 │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
  │                               ^^ <invalid>

note: 
  ┌─ path_tuple.fe:9:37
  │
9 │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
  │                                     ^^^^^^^^^^^^ fn Variant

note: 
  ┌─ path_tuple.fe:9:37
  │
9 │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
  │                                     ^^^^^^^^^^^^^^^^^^^^^^^^ Foo

note: 
  ┌─ path_tuple.fe:9:50
  │
9 │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
  │                                                  ^ u8

note: 
  ┌─ path_tuple.fe:9:53
  │
9 │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
  │                                                     ^ u16

note: 
  ┌─ path_tuple.fe:9:56
  │
9 │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
  │                                                        ^ u32

note: 
  ┌─ path_tuple.fe:9:59
  │
9 │     let Foo::Variant(a, b, c, ..) = Foo::Variant(1, 2, 3, 4)
  │                                                           ^ u64
