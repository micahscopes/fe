---
source: crates/hir-analysis/tests/ty_check.rs
expression: res
input_file: crates/hir-analysis/test_files/ty_check/assign.fe
---
note: 
   ┌─ assign.fe:20:44
   │  
20 │       fn set_inner(mut self, x: i32, y: u32) {
   │ ╭────────────────────────────────────────────^
21 │ │         self.inner = Inner { x, y }
22 │ │     } 
   │ ╰─────^ ()

note: 
   ┌─ assign.fe:21:9
   │
21 │         self.inner = Inner { x, y }
   │         ^^^^ Outer

note: 
   ┌─ assign.fe:21:9
   │
21 │         self.inner = Inner { x, y }
   │         ^^^^^^^^^^ Inner

note: 
   ┌─ assign.fe:21:9
   │
21 │         self.inner = Inner { x, y }
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ assign.fe:21:22
   │
21 │         self.inner = Inner { x, y }
   │                      ^^^^^^^^^^^^^^ Inner

note: 
   ┌─ assign.fe:21:30
   │
21 │         self.inner = Inner { x, y }
   │                              ^ i32

note: 
   ┌─ assign.fe:21:33
   │
21 │         self.inner = Inner { x, y }
   │                                 ^ u32

note: 
   ┌─ assign.fe:25:30
   │  
25 │   pub fn foo(opt: Option<i32>) {
   │ ╭──────────────────────────────^
26 │ │     let mut x = 1
27 │ │     let y = 2
28 │ │ 
   · │
47 │ │     Gen { t: false }.t = true
48 │ │ }
   │ ╰─^ ()

note: 
   ┌─ assign.fe:26:9
   │
26 │     let mut x = 1
   │         ^^^^^ i32

note: 
   ┌─ assign.fe:26:17
   │
26 │     let mut x = 1
   │                 ^ i32

note: 
   ┌─ assign.fe:27:9
   │
27 │     let y = 2
   │         ^ u32

note: 
   ┌─ assign.fe:27:13
   │
27 │     let y = 2
   │             ^ u32

note: 
   ┌─ assign.fe:29:9
   │
29 │     let z = x = 2
   │         ^ ()

note: 
   ┌─ assign.fe:29:13
   │
29 │     let z = x = 2
   │             ^ i32

note: 
   ┌─ assign.fe:29:13
   │
29 │     let z = x = 2
   │             ^^^^^ ()

note: 
   ┌─ assign.fe:29:17
   │
29 │     let z = x = 2
   │                 ^ i32

note: 
   ┌─ assign.fe:31:9
   │
31 │     let mut arr = [false; 10]
   │         ^^^^^^^ [bool; 10]

note: 
   ┌─ assign.fe:31:19
   │
31 │     let mut arr = [false; 10]
   │                   ^^^^^^^^^^^ [bool; 10]

note: 
   ┌─ assign.fe:31:20
   │
31 │     let mut arr = [false; 10]
   │                    ^^^^^ bool

note: 
   ┌─ assign.fe:32:5
   │
32 │     arr[1] = true
   │     ^^^ [bool; 10]

note: 
   ┌─ assign.fe:32:5
   │
32 │     arr[1] = true
   │     ^^^^^^ bool

note: 
   ┌─ assign.fe:32:5
   │
32 │     arr[1] = true
   │     ^^^^^^^^^^^^^ ()

note: 
   ┌─ assign.fe:32:9
   │
32 │     arr[1] = true
   │         ^ u256

note: 
   ┌─ assign.fe:32:14
   │
32 │     arr[1] = true
   │              ^^^^ bool

note: 
   ┌─ assign.fe:34:9
   │
34 │     let mut tuple = (true, false, Inner { x, y })
   │         ^^^^^^^^^ (bool, bool, Inner)

note: 
   ┌─ assign.fe:34:21
   │
34 │     let mut tuple = (true, false, Inner { x, y })
   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (bool, bool, Inner)

note: 
   ┌─ assign.fe:34:22
   │
34 │     let mut tuple = (true, false, Inner { x, y })
   │                      ^^^^ bool

note: 
   ┌─ assign.fe:34:28
   │
34 │     let mut tuple = (true, false, Inner { x, y })
   │                            ^^^^^ bool

note: 
   ┌─ assign.fe:34:35
   │
34 │     let mut tuple = (true, false, Inner { x, y })
   │                                   ^^^^^^^^^^^^^^ Inner

note: 
   ┌─ assign.fe:34:43
   │
34 │     let mut tuple = (true, false, Inner { x, y })
   │                                           ^ i32

note: 
   ┌─ assign.fe:34:46
   │
34 │     let mut tuple = (true, false, Inner { x, y })
   │                                              ^ u32

note: 
   ┌─ assign.fe:35:5
   │
35 │     tuple.2.x = 1
   │     ^^^^^ (bool, bool, Inner)

note: 
   ┌─ assign.fe:35:5
   │
35 │     tuple.2.x = 1
   │     ^^^^^^^ Inner

note: 
   ┌─ assign.fe:35:5
   │
35 │     tuple.2.x = 1
   │     ^^^^^^^^^ i32

note: 
   ┌─ assign.fe:35:5
   │
35 │     tuple.2.x = 1
   │     ^^^^^^^^^^^^^ ()

note: 
   ┌─ assign.fe:35:17
   │
35 │     tuple.2.x = 1
   │                 ^ i32

note: 
   ┌─ assign.fe:37:9
   │
37 │     let mut outer = Outer { inner: Inner { x, y } }
   │         ^^^^^^^^^ Outer

note: 
   ┌─ assign.fe:37:21
   │
37 │     let mut outer = Outer { inner: Inner { x, y } }
   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Outer

note: 
   ┌─ assign.fe:37:36
   │
37 │     let mut outer = Outer { inner: Inner { x, y } }
   │                                    ^^^^^^^^^^^^^^ Inner

note: 
   ┌─ assign.fe:37:44
   │
37 │     let mut outer = Outer { inner: Inner { x, y } }
   │                                            ^ i32

note: 
   ┌─ assign.fe:37:47
   │
37 │     let mut outer = Outer { inner: Inner { x, y } }
   │                                               ^ u32

note: 
   ┌─ assign.fe:38:5
   │
38 │     outer.inner.x = 2
   │     ^^^^^ Outer

note: 
   ┌─ assign.fe:38:5
   │
38 │     outer.inner.x = 2
   │     ^^^^^^^^^^^ Inner

note: 
   ┌─ assign.fe:38:5
   │
38 │     outer.inner.x = 2
   │     ^^^^^^^^^^^^^ i32

note: 
   ┌─ assign.fe:38:5
   │
38 │     outer.inner.x = 2
   │     ^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ assign.fe:38:21
   │
38 │     outer.inner.x = 2
   │                     ^ i32

note: 
   ┌─ assign.fe:40:5
   │  
40 │ ╭     match opt {
41 │ │         Option::Some(mut x) => {
42 │ │             x = 2
43 │ │         }
44 │ │         Option::None => {}
45 │ │     }
   │ ╰─────^ ()

note: 
   ┌─ assign.fe:40:11
   │
40 │     match opt {
   │           ^^^ Option<i32>

note: 
   ┌─ assign.fe:41:9
   │
41 │         Option::Some(mut x) => {
   │         ^^^^^^^^^^^^^^^^^^^ Option<i32>

note: 
   ┌─ assign.fe:41:22
   │
41 │         Option::Some(mut x) => {
   │                      ^^^^^ i32

note: 
   ┌─ assign.fe:41:32
   │  
41 │           Option::Some(mut x) => {
   │ ╭────────────────────────────────^
42 │ │             x = 2
43 │ │         }
   │ ╰─────────^ ()

note: 
   ┌─ assign.fe:42:13
   │
42 │             x = 2
   │             ^ i32

note: 
   ┌─ assign.fe:42:13
   │
42 │             x = 2
   │             ^^^^^ ()

note: 
   ┌─ assign.fe:42:17
   │
42 │             x = 2
   │                 ^ i32

note: 
   ┌─ assign.fe:44:9
   │
44 │         Option::None => {}
   │         ^^^^^^^^^^^^ Option<i32>

note: 
   ┌─ assign.fe:44:25
   │
44 │         Option::None => {}
   │                         ^^ ()

note: 
   ┌─ assign.fe:47:5
   │
47 │     Gen { t: false }.t = true
   │     ^^^^^^^^^^^^^^^^ Gen<bool>

note: 
   ┌─ assign.fe:47:5
   │
47 │     Gen { t: false }.t = true
   │     ^^^^^^^^^^^^^^^^^^ bool

note: 
   ┌─ assign.fe:47:5
   │
47 │     Gen { t: false }.t = true
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ assign.fe:47:14
   │
47 │     Gen { t: false }.t = true
   │              ^^^^^ bool

note: 
   ┌─ assign.fe:47:26
   │
47 │     Gen { t: false }.t = true
   │                          ^^^^ bool
